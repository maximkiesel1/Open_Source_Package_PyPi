import matplotlib.pyplot as pltimport pandas as npclass Visual_NaN_Quote():    def __init_(self, df):        self.df = df        self.dict_nan_rate = {}        def nan_quote_df(self):        ''' Calculate the NaN-Quote of the whole dataframe        INPUT         None        OUTPUT        dict_nan_rate - dictonary with the columns as         keys and the corresponding NaN-rate        '''         # Create a dictonary to fill it with the columns as keys         # and the corresponding NaN-rates.        for i in self.df:            self.dict_nan_rate[i] = self.df[i].isna().sum()/len(self.df[i])        return self.dict_nan_rate        def plot_barchart_columns(self):        """        Plot the barchart of the NaN rate for all columns of the dataset.        """        # create a new axis        ax = plt.axes()        # plot the bar chart        plt.bar(self.dict_nan_rate.keys(), list(self.dict_nan_rate.values()),\                width=0.3)        plt.title("NaN-rate for all columns of the dataset")        plt.ylabel("NaN-rate")        plt.setp(ax.get_xticklabels(), rotation=90, ha='right')        plt.grid(alpha=0.5)        plt.show()        def nan_quote_column(self, column, na_column):        ''' Create a dictonary which shows the nan quote of one column         related to the other column. This helps to understand if specific         unique values  of an column have an influence on the nan-quote         of another column.                INPUT         column - The target column to check the influence        na_column - The column with their nan rates        OUTPUT        dict_nan_rate - dictonary with the unique values of a column as         keys and the nan rates of the corresponding na_column        '''                 # Create a list with the unique values of a column        unique_values = list(self.df[column].unique())         # Create a dictionary to fill it with the columns as keys and the         # corresponding NaN-rates        dict_nan_separation = {}        for i in unique_values: # Fill the dictionary with the NaN-rates            dict_nan_separation[i] = self.df[self.df[column] == i][na_column].\                isna().sum()/len(self.df[self.df[column] == i])